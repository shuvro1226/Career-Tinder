// Set this to true for production
var doCache = false;

// Name our cache
var CACHE_NAME = "career-tinder";

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then(keyList =>
      Promise.all(
        keyList.map(key => {
          if (!cacheWhitelist.includes(key)) {
            console.log("Deleting cache: " + key);
            return caches.delete(key);
          }
        })
      )
    )
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener("install", function(event) {
  console.log("sw installed ");
  event.waitUntil(
    caches.open("static").then(function(cache) {
      cache.addAll([
        "/",
        "/favicon.ico",
        "/icon.png",
        "/index.html",
        "/manifest.json",
        "/static/js/1.1bca0431.chunk.js",
        "/static/css/1.1ef7ac1d.chunk.css",
        "/static/js/main.8a379363.chunk.js",
        "/static/css/main.cf5a3dcf.chunk.css",
        "/static/js/runtime~main.229c360f.js",
        "https://fonts.googleapis.com/css?family=Raleway:400,700"
      ]);
    })
  );
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME).then(function(cache) {
        // Get the assets manifest so we can see what our js file is named
        // This is because webpack hashes it
        fetch("asset-manifest.json")
          .then(response => {
            console.log(`asset manifest is ${response.json()}`);
            response.json();
          })
          .then(assets => {
            // Open a cache and cache our files
            // We want to cache the page and the main.js generated by webpack
            // We could also cache any static assets like CSS or images
            const urlsToCache = ["/", assets["main.js"]];
            cache.addAll(urlsToCache);
            console.log("cached");
          });
      })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener("fetch", function(event) {
  // if (doCache) {
  event.respondWith(
    caches.match(event.request).then(function(response) {
      return response || fetch(event.request);
    })
  );
  // }
});
